{
	"1": {
		"preview": "Kubernetes 클러스터에 배포할 애플리케이션 로컬 디버깅 및 개발하기",
		"logo": "https://static.codenary.co.kr/company-logo/70.png",
		"info": "![[NHN클라우드] Meetup!_Kubernetes 클러스터에 배포할 애플리케이션 로컬 디버깅 및 개발하기_섬네일_230428.jpg](https://image.toast.com/aaaadh/real/2023/techblog/NHNuD074uB77CuC6B0uB4DC%20MeetupKubernetes%20uD074uB7ECuC2A4uD130uC5D0%20uBC30uD3ECuD560%20uC560uD50CuB9ACuCF00uC774uC158%20uB85CuCEEC%20uB514uBC84uAE45%20uBC0F%20uAC1CuBC1CuD558uAE30uC12CuB124uC77C230428.jpg)## Kubernetes 환경에서 로컬 디버깅 및 개발 방식보통 Kubernetes 환경에서 로컬 개발은 아래와 같은 다양한 선택지 중 하나를 취사선택하여 개발할 수 있습니다.⑴ docker-compose 혹은 minikube 등으로 직접 로컬에서 클러스터 환경을 구성하여 개발* 새로운 개발 환경을 구성할 경우 복잡한 환경 설정 및 설치 작업 등으로 인하여 부담이 될 수 있습니다.* 리소스 부족으로 인하여 로컬 환경이 느려지는 경우가 발생할 수 있습니다.\t⑵ 모든 애플리케이션을 로컬에서 실행하여 개발* ⑴번과 같이 리소스 부족으로 인하여 로컬 환경이 느려지는 경우가 발생할 수 있습니다.*  다른 애플리케이션과의 의존성으로 인해 내가 담당하고 있지 않은 다른 애플리케이션까지 로컬에서 구동할 수 있어야 합니다.*  다양한 언어 및 프레임워크로 개발되는 MSA 특성상 복잡한 설치 작업 혹은 환경설정 작업이 수반될 수 있습니다.⑶ 일부 애플리케이션만 실행하여 개발한 후 Kubernetes 클러스터 환경에 배포하여 확인* 개발할 애플리케이션으로 들어오는 요청 및 응답을 직접 구성하여 테스트가 필요하며, * 기능 확인을 위해서 Kubernetes 환경에 배포하여 디버깅하는 작업이 필요합니다.* 수정된 애플리케이션을 클러스터 환경에 배포하여 확인하는 작업에 시간이 많이 소요될 경우 생산성이 저하될 수 있습니다.Telepresence는 빠른 로컬 개발 및 디버깅을 위한 도구이며 이러한 단점들을 해결할 수 있습니다.## Telepresence 란?먼저 Telepresence의 사전적 의미는 공간적으로 떨어져 있는 장소 또는 가상의 장소를 경험하는 것입니다.이러한 단어의 뜻과 유사하게 Telepresence는 원격 Kubernetes 클러스터로 서비스를 프록시하여 로컬에서 개발 및 디버깅하는 과정을 용이하게 하는 도구입니다.*  Kubernetes 클러스터 환경에서 디버깅을 하려면 코드 컴파일하고, 컨테이너 빌드하고 버전 바꿔서 태깅하고, 푸시 한 다음, YAML 형식으로 변경해서 반영하고, 실행 후 외부에서 접속이 가능하도록 네트워크 주소를 변환해 주는 포트 포워딩을 통해서 실행 결과를 확인해야 하는데 이러한 과정 없이도 디버깅을 편하게 할 수 있습니다.Telepresence는 2018년 5월 15일에 CNCF의 샌드박스 단계로 채택이 되었습니다.## 레거시 T",
		"date": "5/8/2023"
	},
	"2": {
		"preview": "무신사가 카테고리숍 추천을 하는 방법",
		"logo": "https://static.codenary.co.kr/company-logo/4248.png",
		"info": "“무신사 추천순” 개선이야기안녕하세요. 무신사 데이터프로덕트팀에서 데이터 사이언티스트로 일하고 있는 노설희입니다.데이터프로덕트팀이라는 이름에서 알 수 있듯이, 저희 팀은 무신사에서 발생하는 데이터를 사용하여 모델 및 서비스를 만드는 일을 하고 있습니다. 이를 통해 유저들에게 더 나은 쇼핑 경험을 제공하고, 파트너 고객과 사내 구성원에게는 효율적으로 업무를 처리할 수 있도록 도움을 주고 있습니다.이 글에서는 카테고리숍 상품 정렬에 ML 모델을 적용한 경험을 공유하고자 합니다. 무신사에서는 “숍”은 상품 리스트를 중심으로 여러 가지 정렬(추천순, 판매순, 높은 가격순 등)을 적용할 수 있는 공간을 의미합니다. 그 중에서도 카테고리숍은 각 카테고리(상의, 아우터 등등)를 누르면 이동하는 페이지입니다. 이 카테고리숍 내의 다양한 정렬옵션 중 이 글에서는 “무신사 추천순”이라는 정렬 기능을 개선한 경험에 대해 이야기해 보겠습니다.카테고리숍은 무신사가 제공하는 다양한 상품 탐색 페이지 중에서, 비교적 많은 유저들이 방문하고 상품 탐색이 활발히 이루어지는 페이지인데요. 이런 이유 때문에, 유저 행동 로그 분석에서 중요한 의미가 있기도 합니다. 또한, 상품을 찾을 때 가장 먼저 방문하는 페이지로, 무신사의 아이덴티티를 표현하는 중요한 페이지입니다. 위와 같은 이유로 저희 팀에서는 카테고리숍에서 유저별로 맞춤화된 상품리스트를 제공한다면 그 임팩트가 가장 클 것으로 판단했습니다.[그림1] 카테고리숍 페이지카테고리숍에 효율적인 정렬방법은 뭐가 있을까?카테고리숍 페이지에 방문하는 유저는 상품 탐색의 목적이 있으면서도 스스로 무엇을 좋아하는지 모르는 경우가 많습니다. 그래서 이 페이지에서는 탐색 목적에 부합하면서도, 유저도 모르는 유저가 좋아할 만한 상품을 앞단에 보여줄 수 있으면 좋겠다고 생각했습니다. 그래서 카테고리숍 페이지는 검색과 추천 두 가지의 성격을 가진 페이지라고 정의하고 두 마리 토끼를 잡기 위해 유저의 인터랙션(클릭, 좋아요 등)이 많은 상품을 우선으로 보여줄 방법을 고민해보았습니다.유저들의 인터랙션을 예측해서 보여준다면 인터랙션이 늘어날 뿐 아니라 최종적으로는 더 많은 구매까지 이어지는 선순환 구조를 만들 수 있을 것으로 생각했고, 유저의 행동을 효율적으로 예측할 방법을 찾던 중 ML모델을 적용해보면 좋을 것 같다는 생각이 들었습니다. 기존에는 페이지뷰, 구매 수 등의 데이터를 활용하여 상품에 스코어를 부여하고 이를 바탕으로 상품을 정렬하는 방식으로 서비스되고 있었는데요. 이 방식은 이전부터 잘 팔렸던 스테디셀러를 더 많이 보여주는 경향이 있었습니다. 또한, 모든 유저에게 동일한 상품 정렬을 보여주어 다양한 유저의 취향을 아우르지 못하는 한계점이 있었는데 이러한 부분을 개선할 수 있다고 생각했습니다.이렇게 저희는 ML모델을 적용해 무신사의 정렬 종류 중 하나인 ‘무신사 추천순’ 을 개선해보기로 했는데요. 모델을 적용하는 과정에서 어떤 알고리즘을 적용할지, 어떤 유저를 대상으로 추천을 제공할지 고민한 과정과 테스트를 진행한 결과까지 모두 공유해",
		"date": "5/8/2023"
	},
	"3": {
		"preview": "일하고 있습니다 - iOS UI Test",
		"logo": "https://static.codenary.co.kr/company-logo/35.png",
		"info": "요기요 iOS XCUITest 사용기 입니다.안녕하세요. 요기요 R&D Center 에서 iOS Developer 로 일하고 있는 이장훈입니다.오늘은 XCUITest 를 사용하여 구현되어 있는 요기요 iOS UI Test 에 대해 이야기 해보려고 합니다.XCUITest?XCUITest?Apple에서 제공하는 iOS 애플리케이션 UI 테스트 프레임워크입니다. 프레임워크를 사용하면 애플리케이션의 UI 요소를 자동화하여 UI 테스트를 실행할 수 있습니다.다음과 같은 형태가 UI Test의 기본 구조 형태입니다.class XCUI_TestBase: XCTestCase {        var app = XCUIApplication!        override func setUp() {        super.setUp()        // 앱을 실행 합니다.         app = XCUIApplication()        app.launch()    }        override func tearDown() {        super.tearDown()        // 활성화된 앱을 종료 합니다.         app.terminate()    }            func test_introActivity() {        // 인트로 테스트를 정의합니다.     }    func introActivity() {        // 함수명이 test 로 시작하지 않으면 테스트로 인식되지 않습니다.     }}테스트 케이스의 검증은 다음과 같이 구현합니다.// 텍스트 필드에 값이 \"Hello, World!\" 가 맞는지 테스트XCTAssertEqual(textField.value as? String, \"Hello, World!\")// accessibilityidentifier가 \"....\" 인 버튼이 선택되어 있는지 테스트 XCTAssertFalse(app.buttons[\"....\"].isSelected)현재 요기요의 UI Test는??요기요는 1주마다 앱 배포를 진행하고 있고, 해당 주기에 맞춰서 회귀 테스트(Regression Test)를 진행하고 있습니다.초기 시작은 APPIUM으로 구현되어서 테스트하고 있었으나,테스트 시작점이 빠르다내부의 리소스 사용 가능하다의 장점을 가지고 있는 XCUITest로 변경되었습니다.Android는 Espresso로 UI 테스트를 진행하고 있습니다.테스트중iOS UI Test는 여러 개의 XCTestPlan으로 구분되어 있고, 해당 plan 은 테스트 케이스에 맞춰서 분리되어 있습니다.UI Test XCTestPlan 리스트UI Test를 준비하던 초창기에 메모리 이슈로 여러 개로 나누긴 했지만, 지금에 와서는 케이스를 확인하고 관리하는데 좀 더 나은 선택이 된듯합니다.테스트 케이스를 잘 알고 있는 QE 분들에게 해당 스크립트를 작성할 수 있게전파를 하려고 했으나, XCUITest를 전부 알려드리기에는 어려운 상황이었습니다. 그래서 생각한 방식은 QE 분들이 스크립트를 작성하기에 편하게 함수를 새로",
		"date": "5/8/2023"
	},
	"4": {
		"preview": "첫 인터랙션 디자이너가 문제를 해결하는 법",
		"logo": "https://static.codenary.co.kr/company-logo/113.png",
		"info": "토스 Interaction Designer는 어떤 일을 하나요?다른 회사의 Interaction Designer와 어떻게 다른지, 토스 팀만의 강점이 궁금해요.토스 제품의 인터랙션을 담당하고 있어요.사용자들이 앱을 더 편리하게 사용할 수 있도록 화면을 개선하는 일을 해요. 전반적으로 인터랙션의 퀄리티가 높아질 수 있도록 시스템을 만드는 일도 하고요.저희 팀의 강점은 인터랙션 디자이너가 직접 제품의 문제를 찾아 개선할 수 있다는 점이에요. 보통 회사에서는 인터랙션 디자이너가 프로젝트 후반에 참여해서 모션 작업을 주로 맡게 되는데요. 저희는 플로우 단위로 제품을 개선할 수 있다 보니 역할 성장의 기회가 많다고 생각해요. 그리고 팀 내에 개발자들이 소속되어있어서 디자이너가 연구한 인터랙션을 바로 구현까지 해볼 수 있죠.Interaction Designer의 업무 범위는 어떻게 정하게 됐나요?잘 정착되지 않은 직군이다보니 다른 직군처럼 ‘일반적으로 해야 하는 일’이 없잖아요. 어떤 일을 어디까지 해야 하는지도 새로 정해야 했을 것 같아요. 팀에서 무슨 업무를 할지 어떻게 정하셨어요?Interaction Designer직군이 토스 앱을 만드는 여러 직군과 접점이 많다 보니 업무 범위를 구분 짓기까지 오랜 시간이 걸렸던 것 같아요. 저는 이 부분을 스스로 정의하기 위해서 2가지 시도했었는데요.인터랙션으로 사용성 문제를 해결하는 사례를 만들었어요.먼저, 토스 앱에서 인터랙션으로 해결해보면 좋을 화면들을 찾아 개선했어요. 그리고 AB 테스트를 통해 실제로 지표의 변화를 만들어내는지 검증했고, 수많은 실패와 성공 사례를 쌓았어요.그 사례로 대출 가심사의 로딩 화면을 개선했던 프로젝트를 설명해 드리면 좋을 것 같은데요. 기존에는 2~30초의 심사 시간 동안 실제 정보와 상관없는 이미지가 반복되어 나오는 화면이었어요. ‘로딩 화면에서 실제 정보를 보여줘서 이탈을 줄이면, 더 많은 사용자가 대출 실행을 하게 될 것이다’라는 가설을 세웠고 실시간으로 심사 완료된 정보가 화면에 보이도록 개선했어요. 이러한 인터랙션의 개선을 통해, 이탈률을 소폭 개선하는 효과를 만들었죠.대출 가심사를 받을 때 로딩 화면 - 기존안(왼)과 개선안(오)심미성이 중요한 화면을 만들었어요.그다음으로, 유저에게 즐거움을 줘야 할 때, 시각적인 완성도를 높여야 할 때 인터랙션 디자인이 필요하다는 것에 대해서는 팀원들의 공감대가 있었어요. 그래서 자연스럽게 심미적인 가치를 높여줘야 하는 업무는 제가 맡아서 진행하게 되었어요.예를 들어, 추석 편지를 보내는 이벤트에서 편지를 보냈다는 심상을 강조하기 위해 편지가 날아가는 모션을 추가했어요. 장애인의 날 이벤트에서는 모바일에서 점자를 눌러보는 경험을 극대화하기 위해 사용자가 클릭하면 모션으로 피드백을 주고, 화면이 밝아지는 시각 효과 등을 주었죠. 이런 부분을 언급하는 사용자도 점점 생기고 있는 걸 보면 이런 영역들이 인터랙션의 중요한 가치 중 하나라고 느껴져요.추석 편지 이벤트, 크리스마스 이벤트, 장애인의날 이벤트 중 일부장애인의날 이벤트를",
		"date": "5/4/2023"
	},
	"5": {
		"preview": "[신청 시작] 우아한스터디 2023 여름시즌",
		"logo": "https://static.codenary.co.kr/company-logo/102.png",
		"info": "선발 기준이 어떻게 되나요? 제출하신 참여 신청서를 스터디 리더가 직접 확인하여 선발하며 신청 사유를 토대로 배움과 성장에 대한 의지가 얼마나 있는지를 중점적으로 검토할 예정입니다. 선발 결과는 합격&불합격 모두 이메일로 개별 안내합니다. 우아한스터디에 우아한형제들 구성원 비율이 어느 정도 되나요? 우아한형제들 구성원과 타소속 분들의 비율이 따로 정해져 있지 않습니다. 신청서 내용을 보고 동일한 기준으로 선발하므로 우아한형제들 구성원 수는 스터디마다 다릅니다. 스터디를 중복으로 신청해도 되나요? 우아한스터디는 정원이 많지 않은 소규모 스터디 모음으로 최대한 많은 분들께 참여 기회를 드리기 위해 인당 1개의 스터디만 신청할 수 있습니다.",
		"date": "5/4/2023"
	},
	"6": {
		"preview": "웹 프론트엔드 개발자가 웹 성능 최적화를 해야 하는 이유",
		"logo": "https://static.codenary.co.kr/company-logo/375.png",
		"info": "시작하는 글웹 성능 최적화(개선)은 웹페이지를 효율적으로 동작하게 하는 작업입니다. 웹 성능 최적화를 위해 백엔드, 인프라 최적화 등도 중요한 요소지만오늘은 웹 프론트엔드에 집중한 웹 성능 최적화 방법을 이야기 해보겠습니다.물론, 이 글에서 말하는 웹 성능 최적화 작업은 상품 관리자, 프로젝트 매니저, 디자이너 기획자도 알아두면 좋습니다.상품 관리자, 프로덕트 매니저에게 웹 페이지가 얼마나 빨리 로딩되는지가 그들이 관리하는 서비스 사용자 경험(UX, User Experience)에 영향을 줄 것이며자연스레 매출 및 수익에 영향을 줄 수 있기 때문에 웹 성능 최적화를 대략적으로 이해하는 것은 중요합니다.그리고 기획자, 디자이너 역시 페이지 주요 영역을 디자인하는 복잡도에 따라 나쁜 사용자 경험을 줄 수도 있고, 반대로 좋은 사용자 경험을 줄 수도 있습니다.그렇기 때문에 기획자, 디자이너에게도 웹 성능 최적화에 대한 이해도는 중요한 측면이 있습니다.결국, 웹 성능 최적화 작업은 웹 서비스에 비즈니스적인 긍정적인 기여를 할 수 있습니다.즉, 웹 프론트엔드 개발자의 웹 성능 최적화 작업으로서 사용자에게 좋은 사용자 경험을 제공할 수 있고, 이것은 비즈니스의 성공과도 직결될 수 있습니다.이 포스팅에서 웹 성능 최적화를 왜 해야 하는지, 웹 성능 최적화는 어떤 지표로 나눠져 있고 어떻게 개선할 것인지 다뤄보도록 하겠습니다.웹 성능 최적화를 해야 하는 이유1) 비즈니스 관점쉽게 말하면, 웹 성능 최적화를 한다는 것은 사용자에게 제공하려는 웹 사이트를 빠르게 보여주는 것입니다. 이는 자연스레 비즈니스에 영향을 줍니다.일반적으로 생각해 볼 때, 웹 사이트가 사용자에게 빨리 로딩되면 좋은 사용자 경험(UX, User Experince)을 제공할 수 있습니다.반대로 사용자가 웹 사이트에 들어갔을 때, 하얀 화면을 노출시키거나 웹 사이트 로딩 및 렌더링에 지연이 발생하면 사용자는 자연스레 이탈하게 되고,이 때 해당 웹 서비스는 방문 사용자에 대한 비즈니스 기회를 잃어버리게 됩니다.아래는 2017년 Google의 모바일 부문 글로벌 제품 리드인 Daniel An이 말한 Think with Google의 기사에서 발췌한 내용으로 웹 페이지 로딩 시간과 사용자 이탈률에 대해 이야기 했습니다.아래 자료에 따르면 페이지 로딩 시간이 1초에서 3초로 증가하면 페이지 이탈률이 32%로 증가한다고 하고, 1초에서 10초가 되면 무려 페이지 이탈률이 123%나 된다고 합니다.Google / SOASTA Research, 2017전세계 2위 이동 통신사인 Vodafone은 2021년 웹 성능 개선 건에 대한 A/B 테스트를 통해 웹 성능 지표 중 하나인 LCP(Largest Contentful Paint,웹 페이지 내 주요 콘텐츠가 렌더링되어서 사용자에게 표출되는 시간)를 31% 개선함에 따라 판매가 8% 증가함을 확인했습니다.그리고 성공적 잠재고객으로 전환한 사용자 비율이 15%가 증가하였고, 결제 장바구니 방문률도 11%나 증가하기도 했습니다.인도네시아 최대 전자상거래 회",
		"date": "5/4/2023"
	},
	"7": {
		"preview": "[DEVOCEAN 스쿨] RN(React Native) 스터디 3주차",
		"logo": "https://static.codenary.co.kr/company-logo/375.png",
		"info": "안녕하세요 Teus입니다.올해부터 DEVOCEAN을 통해서 스터디를 진행하고 있습니다!제가 준비한 주제는 React를 활용해서 크로스플랫폼을 플랫폼 어플리캐이션을 만드는 React Native입니다!이번주는 3주차에 진행한 스터디 내용을 다루는 포스팅 입니다!0. 스터디 운영이번 주 역시 3개의 조로 나누고, 각 조별로 6~7장(다이어리 관리 앱 만들기)내용을 실습 하였습니다.(근데, 저같은 경우 실습시간동안 에러 하나에 30분을 소비하느라, 제대로 실습도 못하고 씌익씌익 왜안돼! 했던건 함정....)이번주는 기존에 배웠던 내용 + Navigation + ContextAPI를 사용해서 Component간 전역변수 관리에 대한 내용이 주를 이룹니다.1. NavigationReact를 기존에 사용해보신 분들은 아시겠지만, Component간 전환을 위해서 Navigation을 자주 이용합니다.React Native같은 경우 react-navigation을 이용하며 여기에 추가적으로 스택네비게이터, 드로어 네비게이터, 상단탭, 하단탭 네비게이터 등을 지원합니다.이때 어플리캐이션에서 자주 사용되는 하단 탭 네비게이터 예제를 보도록 하겠습니다.import React from 'react' ; import { NavigationContainer } from '@react-navigation/native' ; import { createBottomTabNavigator } from '@react-navigation/bottom-tabs' ; import { Text } from 'react-native' ; import { SafeAreaView } from 'react-native-safe-area-context' ; const Tab = createBottomTabNavigator ( ) ; function HomeScreen ( ) { return < Text > Home < / Text > ; } function SearchScreen ( ) { return < Text > Search < / Text > ; } function NotificationScreen ( ) { return < Text > Notification < / Text > ; } function MessageScreen ( ) { return < Text > Message < / Text > ; } function App ( ) { return ( < NavigationContainer > < Tab . Navigator initialRouteName = \"Home\" > < Tab . Screen name = \"Home\" component = { HomeScreen } / > < Tab . Screen name = \"Search\" component = { SearchScreen } / > < Tab . Screen name = \"Notification\" component = { NotificationScreen } / > < Tab . Screen name = \"Messa",
		"date": "5/4/2023"
	},
	"8": {
		"preview": "Memory 리소스 최적화하기 (VPA 및 Kubecost 추천로직 분석)",
		"logo": "https://static.codenary.co.kr/company-logo/375.png",
		"info": "Kubernetes 의 Node 개수는 Pod가 요청하는 CPU, Memory 의 크기에 따라 결정됩니다.Pod가 많은 CPU, Memory 를 요청할 수록 많은 불필요하게 많은 Node가 필요하며, 너무 적을 경우 안정적인 서비스 운영이 어렵습니다.이번 글에서는 Pod의 리소스 요청값(=requests) 를 최적화 하는 방법에 대해서 소개하려고 합니다.Requests와 LimitsKubernetes에 배포될 Pod 를 정의할때 아래와 같은 requests 와 limits 값을 정해야 합니다.spec.containers[].resources.requests.cpuspec.containers[].resources.requests.memoryspec.containers[].resources.limits.cpuspec.containers[].resources.limits.memoryrequests 는, Pod가 Node에 스케줄링될 때 필요한 공간 입니다.Node에 requests 만큼의 CPU, Memory 가 남아있을 경우 Pod가 스케줄링되며, 만일 부족하다면 다른 Node에 스케줄링되거나,Cluster Autoscaler 등이 구성되어 있다면 새로운 Node가 생성되고 Pod가 스케줄링 됩니다.가능한 Node가 없다면 Pending 상태로 대기합니다.limits 은 Pod가 실제 사용할수 있는 최대 리소스입니다.requests.cpu=100m, limits.cpu=200m 이라면 Pod는 100m의 여유가 있는 Node에 스케줄링 되지만, 실제 동작시에는 최대 200m 까지 사용할 수 있습니다.따라서 특정 Node의 모든 Pod 의 sum(limits) 값이 Node의 실제 CPU 보다 클 수 있습니다.따라서 다수의 Pod가 동시에 requests 이상의 CPU를 사용할 경우 Node의 CPU가 부족해질수 있고, throttling 으로 인한 전체적인 성능저하가 발생할수 있습니다.만일 Memory가 부족하다면 OOMKilled가 (Out of Memory) 발생할수 있습니다.Requests는 비용이중 비용(=Node수)과 직결되는건 requests 값 입니다. requests 가 너무 클 경우 불필요한 Node로 인한 비용 낭비가 발생할 수 있습니다.반대로 너무 적을 경우 하나의 Node에 너무 많은 Pod가 스케줄링되어 throttling 및 OOMKilled가 빈번하게 발생할 수 있습니다.그렇다면 어떻게 적절한 Requests 값을 찾을수 있을까요?실사용량 기반의 Requests 최적화실제 Pod가 사용하는 리소스 사용량을 측정하고 이를 기반으로 Requests 값을 정하는 것입니다. (사실 당연한 얘기)VPA (Vertical Pod Autoscaler) 와 Kubecost 는 이러한 방식의 Recommender 를 가지고 있습니다.전체적인 Architecture는 거의 유사한데, metric server 로부터 Pod의 실사용량을 수집하고, 이를 기반으로 requests 값을 추천하는 방식입니다.Requests 를 어떻게 계산할",
		"date": "5/4/2023"
	},
	"9": {
		"preview": "내가 만든 워드클라우드 : 성능개선을 위한 여정 (Web Worker)",
		"logo": "https://static.codenary.co.kr/company-logo/1311.png",
		"info": "안녕하세요. 아이지에이웍스 MI 개발실에서 프론트엔드 개발을 맡고 있는 예리엘입니다.🔍워드클라우드?워드클라우드는 데이터를 시각적으로 보여줌으로써 키워드와 개념을 직관적으로 파악할 수 있게 해줄 수 있는 기법입니다. 가중치가 크거나 빈도가 높은 단어는 크게 표현해 한 눈에 들어 올수있게 하는 대표적인 기법이 있습니다.이러한 특징으로 컴포넌트를 만들 때 고려해야 하는 부분들이 많고 복잡할 수 있습니다. 하지만 직접 만들어보면 배울 점이 많은 과제라고 생각하여 직접 만들어 보았습니다.🧐 첫 워드클라우드 아쉬운 완성초기에 구현했던 워드클라우드는 BFS로 전체 캔버스를 탐색하고 DFS로 글자크기만큼 비었는지 확인 후 단어를 놓았습니다. 그러고 나서 완전 탐색으로 다시 전체 canvas 빈자리를 확안하고 단어를 놓는 로직으로 구현하였습니다.보라색 색깔 글자를 보게 되면 3가지의 알고리즘이 사용하였습니다. 이중배열, while, 재귀까지 복잡성을 높이는 여러 요소가 포함되어 있습니다.그 결과 코드의 복잡성과 연산 시간이 늘어남과 동시에 만족스럽지 않은 결과물을 얻었습니다. 🥲🥲글자도 겹치고 답답해 보이는 첫 워드클라우드...구체적인 문제점과 개선방안다시 한번 코드를 확인하면서 로직 외에도 다양한 관점에서 코드를 분석해 봤습니다.문제점1. 연산시 필요하지 않은 this 참조 array 2. 확장이 어려운 구조 3. 연산 위치의 정확성 4. 싱글스레드(메인스레드) 연산으로 스레드를 점유하는 상태 5. 재귀로 인해 연산의 사이즈가 커지면 `Maximum call stack size` 발생개선해보자~~!➊. 연산시 필요하지 않은 this 참조 array➡ this 참조는 최대한 지양하고 순수함수로 구성.private readonly visitedBuffer = Array . from ( Array ( this . originalCanvasWidth ) , ( ) => new Array ( this . originalCanvasHeight ) . fill ( 0 ) ) ;visitedBuffer는 캔버스 크기만큼의 이중 배열이 필요할 때마다 사용하기 위해 this 참조 변수입니다.대체로 방문을 확인하는 용도로 사용하였습니다.const visited = new Set ( ) ; ... while ( queue ) { visited . has ( ) ; ... visited . add ( ) ; }필요할 때마다 배열을 만드는 것이 아니라 순수 함수로 외부 상태에 의존하지 않는 방향으로 코드를 변경하였습니다.전에는 이중 배열로 방문을 확인했다면 해당 함수의 Set 자료구조를 사용하여 연산을 진행하는 함수 안에서만 사용되게 하였습니다.❷. 확장이 어려운 구조➡ 옵션 정리 (width, height, minFontSize, maxFontSize ...)< WordCloud words = { WordCloudValues } size = { 5 } width = { 50 } height = { 50 } />기본으로 width, height, 단어리스트, 크기 등 사용자는",
		"date": "5/4/2023"
	},
	"10": {
		"preview": "EKS Jam For App Modernization 워크샵 1등의 추억",
		"logo": "https://static.codenary.co.kr/company-logo/4248.png",
		"info": "EKS Jam For App Modernization 워크샵에서 1등을 하다!안녕하세요. 무신사 테크의 SRE팀 안다혜, 최성우입니다.저희는 지난 4월 11일~12일에AWS와 LG CNS가 함께 주최한 EKS Jam fopr App Modernization(이하 AM핸즈온)에 참가했는데요. 이 행사에서 ‘우승’을 했다는 좋은 소식을 전하기 위해, 글을 씁니다.어떤 계기로 이 행사에 참여했고, 어떻게 우승할 수 있었는지 그 생생한 이야기를 저희가 들려드릴게요.AM 핸즈온이란?성우 : AM 핸즈온 이틀간 진행되었는데요. 첫날 워크숍을 통해 Security, Autoscaling, Observability, Network, Automation 의 5가지의 항목에 대해서 App Modernization을 적용할 수 있는 방법을 배우고, 둘째날에 5가지 각 항목에 대해서 실제 DevOps/SRE들이 EKS를 도입/운영하며 마주하게 되는 문제들을 해결하고 점수를 얻는 *Jam을 진행했습니다.(*JAM이란 즉흥합주에서 유래된 단어로, 현장에서 주어지는 주제로 한정된 시간 안에 즉석에서 개발하는 세션을 의미합니다.)다혜 : 무신사의 여러 서비스는 컨테이너 환경에서 구동되고 있는데요. 여러 컨테이너를 효율적으로 관리하는 관리형 서비스 중 하나가 EKS(Elastic Kubernetes Service)입니다. EKS에서 App Modernization이란 클라우드 환경에서 애플리케이션을 더 효율적이고 안정적으로 운영하는 것을 의미합니다. 예를 들어, 컨테이너 환경과 MSA(Micro Service Architecture)를 사용함으로써 서비스마다 독립성을 높여 스케일 확장을 효율적으로 하고, 장애가 일어나더라도 서비스에 미치는 영향을 최소화할 수 있습니다. 따라서 이 워크숍은 무신사의 여러 서비스를 더 효율적으로 관리하고 안정적으로 운영하는 기술을 배울 수 있을 좋은 기회였죠.AM핸즈온에 참여하게 된 계기다혜 : DevOps/인프라 관련 정보 공유 카톡방에 이 AM 핸즈온에 대한 글이 올라온 걸 발견했는데, ‘상금 100만 원’이 눈길을 끌더라구요. 바로 ‘사이트 신뢰성 엔지니어링’이란 책으로 저희 팀 성우 님, 그리고 다른 회사에서 DevOps로 일하는 지인 두 분이 있는 스터디 카톡방에 공유했습니다. 이 DevOps 지인 두 분과 저는 2022 AWS Community Day의 GameDay에서 1등을 한 전적이 있었습니다. 이미 한번 대회에서 합을 맞춰 보았기에 이 두 분의 실력은 익히 알고 있었고, 성우님과도 6개월 이상 같이 일을 하며 성우님의 능력도 역시 알고 있었습니다. 그렇게 팀을 먼저 꾸렸습니다.상금헌터를 다짐했던 당시의 카톡 대화다혜: 이후에, 저희 팀 리더이신 호진 님께도 링크를 보여드리며 “요런 게 있는데… 상금을 타러… 다녀오고 싶어요..” 라고 말씀드렸는데요, 양일 모두 교육으로 처리할 수 있게 도와주셔서 참여할 수 있었습니다.평소 SRE팀의 일원으로 업무를 하면서 ‘EKS, 네트워크, 보안 등과 관련된 기술들을 깊게 알아야 하는",
		"date": "5/3/2023"
	}
}