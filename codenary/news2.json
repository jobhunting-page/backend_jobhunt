{
	"9": {
		"preview": "Spring Camp 2023 @을지로 SKT타워 참관 후기",
		"logo": "https://static.codenary.co.kr/company-logo/375.png",
		"info": "안녕하세요. 지난 4/22 토요일, DEVOCEAN에서 초대권을 받아 을지로 SKT타워에서 진행된 Spring Camp 2023 행사에 다녀왔습니다.Spring Camp 2023 에서 진행한 세션에 대한 간략한 소개와 후기를 적어보겠습니다.행사는 오전 11시에 접수를 시작하여, 12시부터 18시까지 총 7개의 세션이 진행되었습니다.세션 영상은 가까운 시일 내에 유튜브 채널로 업로드된다고 하니 오프라인에 참여하지 못하신 분들도 아래 내용을 참고하셔서 필요한 내용은 들어보시길 추천드립니다.또한, 일부 발표 자료들은 이미 KSUG 페이스북 그룹에 업로드되어 있으니 관심 있는 분들은 참고하시면 좋을 거 같습니다..세션1. 어느 #월급쟁이개발자 의 스프링 부트 따라잡기 Ver.3첫 번째 세션을 한 문장으로 요약하자면, \"Spring 6 와 Spring Boot 3 는 이전 버전과 어떤 게 다른가?\" 입니다.이 세션을 통해 Java, Jakarta EE, Spring, Spring Boot 각각의 최신 버전에 포함된 기능들이 어떤 것들이 있는지 빠르게 훑어볼 수 있습니다.무엇이 달라졌는지, 왜 달라졌는지 한눈에 보고자 하시는 분들이 계시다면 아래 세션을 보시는 걸 추천합니다.또한, 앞으로 직접 변경 내용을 확인하고자 하신다면, 발표 중간에 언급된 것처럼 Spring Blog 의 Release Note 또는 Spring 프로젝트의 Github Wiki를 통해 직접 내용을 확인할 수 있습니다.세션2. 글로벌 서비스를 위한 Timezone/DST두 번째 세션을 한 문장으로 요약하자면, \"Summer Time 에 대처하는 Java\" 입니다.다양한 Timezone 을 대상으로 하는 서비스가 아니라면 당장은 무관할 수 있지만, 글로벌 서비스를 지향하는 개발자라면 한 번쯤 정리해 볼 법한 주제라고 생각합니다.시간 관련 용어, Java의 시간 Package 및 Class, 그리고 실무에서의 적용에 관한 내용을 확인할 수 있습니다.다만, 이 주제는 단순히 개발자의 입장에서만 이해하기보다 서비스를 어떻게 기획하고 책임을 나눌지에 대해서도 함께 고민해볼 필요가 있습니다.세션 3&4. 대규모 엔터프라이즈 시스템 개선 경험기세 번째와 네 번째 세션은 같은 경험에 대해서 각각 시니어와 주니어 분이 발표를 진행했습니다. 제목 그대로 대규모 엔터프라이즈 시스템을 개선할 때 설계 전략과 구체적인 내용에 대해 들을 수 있습니다.Ports&Adapters Architecture, Event-Driven Architecture, Domain Driven Development를 기반으로 하여 기존 시스템을 점진적으로 옮겨가는 과정에서 마주한 고민들을 생생하게 들을 수 있었습니다.발표자 분께서 말씀하셨듯이 1부는 전체적인 방향성을 고민하는 분(보통 시니어)이, 2부는 코드단 내용이 궁금한 분이 듣는 걸 추천합니다.세션5. 실무에서 적용하는 테스트 코드 작성 방법과 노하우다섯 번째 세션을 한 문장으로 요약하자면, \"좋은 테스트를 위한 고민의 과정\" 입니다.테스트 코드를 좀 더 재사용 가능",
		"date": "5/3/2023"
	},
	"10": {
		"preview": "4월 백엔드 개발 리뷰",
		"logo": "https://static.codenary.co.kr/company-logo/573.png",
		"info": "킵그로우 개발 챕터 Brown 입니다.4월의 백엔드 개발 리뷰에서는 잘못 설계해서 힘들었던 경험을 공유하고 기능 개발 전, 설계 시 고려 사항에 대해 논의하였고 TDD 방법론과 관련한 세부 주제들을 바탕으로 리뷰를 진행하였습니다.잘못 설계해서 힘들었던 경험 공유설계가 끝난 후(위) / 설계를 하는 중(아래)잘못된 설계로 힘들었던 경우에 대하여 다양한 경험들을 공유하였습니다.개발해야하는 기능을 서로 다르게 이해하고 설계를 하게된 경우기능을 개발하게 된 의도를 제대로 파악하지 못한 경우특정 도메인에 대한 이해나, 문서 등에 대한 서치가 부족한 채 설계한 경우잘못된 설계로 기능 개발 자체의 난이도가 높아지는 경우다른 기능의 설계를 차용 하였으나, 현재 도메인에는 맞지 않는 경우기능 개발 전, 설계 시 고려 사항에 대한 공유앞서 잘못된 설계로 힘들었던 들을 바탕으로 설계 시 고려 사항에 대한 내용을 논의하였습니다.보통 잘못 설계한 경우, 개발 자체가 어려워지고 이를 본인도 알고 있다. 개발 일정에 맞추려, 수정 없이 두게되면 결국 레거시 코드가 되기 때문에 개발 자체가 쉽게 풀리지 않는 경우, 빠르게 다른 사람에게 도움을 받거나 다시 설계한다.단순한 기능 추가가 아닌 다른 방법이 있는지에 대해서 고민한다. 이전에 만들어진 기능을 활용할 수 있는지 확인하고 비개발적인 방향으로도 이를 해결할 수 있는지에 대해 고민한다.도메인에 대한 지식과 기술에 대한 이해를 가지고 설계를 시작한다. 얕은 지식과 잘못된 이해를 바탕으로 만들어진 설계는 구현 단계에서 불가능한 부분이 있음을 깨닫게 된다.해당 기능이 왜 만들어지게 되었는지, 의도에 대해 파악 해야한다.기능이 확장될 수 있다는 생각을 가지고 설계한다. 절대 라는 것은 없기 때문에 예상 할 수 있는 추가 기능들도 설계 시 같이 고려한다.TDD 방법론에 대한 논의실무에서 TDD를 얼마만큼 활용하고 있는지, TDD의 장단점은 무엇인지, TDD는 필수 인지 등, 각 개발자 분들이 생각하시고 적용하고 계신 TDD에 대해 자유롭게 이야기를 나누었습니다.통합 테스트가 성공하는 경우Matthew께서 정리해주신 TDD를 사용하는 이유, TDD의 장단점에 대한 내용은 아래와 같습니다.아래 내용을 바탕으로 TDD가 가지는 장점과 이를 개발 일정에 맞춰 활용하기 위한 숙련도가 필요함에 대해 이야기를 나누었고, 적용하는 범위와 어떤 식으로 구현하는지에 대해 공유하였습니다.TDD를 사용하는 이유일반적인 개발방식일반적인 개발방식에서 버그가 발생한다면 원인을 찾기 위해 디버깅과 많은 코드를 탐색해야 한다. 최악의 경우 개발한 시간보다 버그를 찾는 시간이 길어지거나 설계를 뒤집어야 하는 상황이 발생할 수 있다.TDD 개발방식TDD 개발방식이 일반적인 개발 방식과 다른 점은 MVP(Minimum Viable Product) 단위로 테스트가 성공할 때마다 점진적으로 기능을 확장해 나감과 동시에 신뢰성을 높이는 방식이다.TDD의 장점개발자에게 잘 동작하는 기능을 수정하는 것은 심리적 불안감을 주기 때문에 꺼려지는 작업이다. 하지만 기능의",
		"date": "5/2/2023"
	}
}